services:
  # FrankenPHP Service
  frankenphp:
    container_name: klinik
    image: laravel-klinik-app
    build:
      context: .
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    entrypoint: php artisan octane:frankenphp --port=80 --workers=1 --max-requests=1
    ports:
      - "8002:80"
    volumes:
      - ./:/app
    networks:
      - klinik-project
    env_file:
      - .env
    depends_on:
      - postgres
      - redis

  # frankenphp:
  #   container_name: klinik
  #   image: laravel-klinik-app
  #   build:
  #     context: .
  #     args:
  #       UID: ${UID:-1000}
  #       GID: ${GID:-1000}
  #   entrypoint: php artisan octane:frankenphp --port=80 --workers=1 --max-requests=1
  #   ports:
  #     - 8002:80
  #   volumes:
  #     - ./:/app
  #   networks:
  #     - klinik-project
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #     - redis

  vite:
      container_name: vite
      build:
        context: .
        dockerfile: Dockerfile.vite
      working_dir: /app
      command: npm run dev -- --host
      ports:
        - "5173:5173"
      volumes:
        - ./:/app
      environment:
        - VITE_API_URL=http://frankenphp:80
      networks:
        - klinik-project
      depends_on:
        - frankenphp


  #     context: .
  #     dockerfile: ./docker/development/workspace/Dockerfile
  #     args:
  #       UID: ${UID:-1000}
  #       GID: ${GID:-1000}
  #       XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
  #       XDEBUG_MODE: develop,coverage,debug,profile
  #       XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
  #       XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
  #       XDEBUG_LOG: /dev/stdout
  #       XDEBUG_LOG_LEVEL: 0
  #   tty: true
  #   stdin_open: true
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./klinik:/var/www/laravel-projects/projects/klinik
  #   working_dir: /var/www/laravel-projects/projects/klinik
  #   networks:
  #     - klinik-project

  # mysql:
  #   image: mysql:8.0
  #   restart: unless-stopped
  #   ports:
  #     - "${DB_PORT}:3306"
  #   environment:
  #     - MYSQL_DATABASE=${DB_DATABASE}
  #     - MYSQL_USER=${DB_USERNAME}
  #     - MYSQL_PASSWORD=${DB_PASSWORD}
  #     - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
  #   volumes:
  #     - mysql-data:/var/lib/mysql
  #   networks:
  #     - klinik-project
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # PostgreSQL Service
  postgres:
    image: postgres:13
    container_name: klinik-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Menambahkan init.sql  
    ports:
      - "${DB_PORT:-5432}:5432"  # ‚Üê harusnya expose port 5432
    networks:
      - klinik-project
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    image: redis:alpine
    container_name: klinik-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - klinik-project
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      timeout: 5s

networks:
  klinik-project:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  # mysql-data:
  #   driver: local
