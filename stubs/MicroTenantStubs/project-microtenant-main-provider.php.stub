<?php

namespace {{NAMESPACE}}\Providers;

use Exception;
use Illuminate\Foundation\Http\Kernel;
use Hanafalah\LaravelSupport\{
    Concerns\NowYouSeeMe,
    Supports\PathRegistry
};
use Illuminate\Support\Str;
use Hanafalah\ModuleWorkspace\Contracts\Data as WorkspaceDTO;
use {{NAMESPACE}}\{
    {{CLASS_BASENAME}},
    Contracts,
    Facades
};
use Hanafalah\LaravelSupport\Middlewares\PayloadMonitoring;

class {{CLASS_BASENAME}}ServiceProvider extends {{CLASS_BASENAME}}Environment
{
    use NowYouSeeMe;

    public function register()
    {
        $this->registerMainClass({{CLASS_BASENAME}}::class)
             ->registerCommandService(CommandServiceProvider::class)
             ->registerServices(function(){
                 $this->binds([
                    Contracts\{{CLASS_BASENAME}}::class => function(){
                        return new {{CLASS_BASENAME}};
                    },
                    //WorkspaceDTO\WorkspaceSettingData::class => WorkspaceSettingData::class
                ]);
            });
    }

    public function boot(Kernel $kernel){
        $kernel->pushMiddleware(PayloadMonitoring::class);

        $this->app->booted(function(){
            $model   = Facades\{{CLASS_BASENAME}}::myModel($this->TenantModel()->find({{CLASS_BASENAME}}::ID));
            $this->deferredProviders($model);

            tenancy()->initialize({{CLASS_BASENAME}}::ID);
            $tenant = tenancy()->tenant;
            $tenant->save();

            $config_name = Str::kebab($model->name); 

            $this->registers([
                '*',
                'Config' => function() {
                    $this->__config_{{SNAKE_LOWER_CLASS_BASENAME}} = config('{{SNAKE_CLASS_BASENAME}}');
                },
                'Provider' => function() use ($model,$config_name){
                    $this->bootedRegisters($model->packages, $config_name, __DIR__.'/../'.$this->__config_{{SNAKE_LOWER_CLASS_BASENAME}}['libs']['migration'] ?? 'Migrations');
                    $this->registerOverideConfig($config_name,__DIR__.'/../'.$this->__config_{{SNAKE_LOWER_CLASS_BASENAME}}['libs']['config']);
                },
                'Model', 'Database'
            ]);
            $this->registerRouteService(RouteServiceProvider::class);

            $this->app->singleton(PathRegistry::class, function () {
                $registry = new PathRegistry();

                $config = config("{{SNAKE_LOWER_CLASS_BASENAME}}");
                foreach ($config['libs'] as $key => $lib) $registry->set($key, '{{LOCAL_PATH}}'.$lib);
                return $registry;
            });
        });
    }
}
